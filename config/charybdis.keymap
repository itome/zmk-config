#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE 0
#define NUFU 1
#define SYM 2
#define NAV 3
#define MED 4
#define POI 5
#define SCR 6
#define SNI 7

&sl { release-after-ms = <250>; };

&mt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <150>;
};

/ {
    chosen { zmk,matrix_transform = &default_transform; };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 7 8 9 18 33 34 20 19 10 11 22 23 34 35 18 19 20 21 30 31 32 33 39 40>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 12 13 14 24 0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_click {
            bindings = <&mkp LCLK>;
            key-positions = <31 32>;
        };

        right_click {
            bindings = <&mkp RCLK>;
            key-positions = <32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
&trans  &kp Q         &kp W        &kp E        &kp R         &kp T        &kp Y      &kp U          &kp I        &kp O        &kp P                 &trans
&trans  &hml LCTRL A  &hml LALT S  &hml D LGUI  &hml LSHFT F  &kp G        &kp H      &hmr RSHFT J   &hmr RGUI K  &hmr RALT L  &hmr RCTRL SEMICOLON  &trans
&trans  &lt POI Z     &kp X        &kp C        &kp V         &kp B        &kp N      &kp M          &kp COMMA    &kp DOT      &lt POI SLASH         &trans
                                   &lt MED ESC  &lt 1 SPACE   &lt 3 TAB    &kp ENTER  &lt SYM SPACE
            >;
        };

        NuFu {
            label = "Numeral/Function";
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F12    &trans  &kp N7  &kp N8  &kp N9  &kp DELETE     &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &kp N4  &kp N5  &kp N6  &kp BACKSPACE  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F10    &kp N0  &kp N1  &kp N2  &kp N3  &trans         &trans
                        &trans  &trans  &trans     &trans  &trans
            >;
        };

        Symbol {
            label = "Symbol";
            bindings = <
&trans  &kp TILDE  &kp AMPS  &kp STAR   &trans     &kp PLUS     &trans  &kp LBRC  &kp RBRC  &trans   &kp PIPE  &trans
&trans  &kp MINUS  &kp DLLR  &kp PRCNT  &kp CARET  &kp EQUAL    &trans  &kp LPAR  &kp RPAR  &kp DQT  &kp APOS  &trans
&trans  &kp UNDER  &kp EXCL  &kp AT     &kp HASH   &kp GRAVE    &trans  &kp LBKT  &kp RBKT  &trans   &kp BSLH  &trans
                             &trans     &trans     &trans       &trans  &trans
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans         &kp TAB      &trans     &kp DELETE     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &kp BACKSPACE  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp INS        &trans
                        &trans  &trans  &trans    &trans    &trans
            >;
        };

        Media {
            label = "Media";
            bindings = <
&trans  &trans      &trans        &bt BT_CLR_ALL  &trans            &trans        &trans      &trans            &bt BT_CLR_ALL  &trans        &trans      &trans
&trans  &kp C_PREV  &kp C_VOL_DN  &kp C_MUTE      &kp C_VOL_UP      &kp C_NEXT    &kp C_PREV  &kp C_VOL_DN      &kp C_MUTE      &kp C_VOL_UP  &kp C_NEXT  &trans
&trans  &trans      &trans        &trans          &trans            &trans        &trans      &trans            &trans          &trans        &trans      &trans
                                  &trans          &kp C_PLAY_PAUSE  &kp C_STOP    &kp C_STOP  &kp C_PLAY_PAUSE
            >;
        };

        Pointer {
            label = "Pointer";
            bindings = <
&trans  &trans     &trans    &trans     &trans     &trans       &trans     &trans     &trans    &trans    &trans     &trans
&trans  &kp LCTRL  &kp LALT  &kp LGUI   &kp LSHFT  &trans       &trans     &kp RSHFT  &kp RGUI  &kp RALT  &kp RCTRL  &trans
&trans  &trans     &mo SCR   &mo SNI    &trans     &trans       &trans     &trans     &tog SNI  &tog SCR  &trans     &trans
                             &mkp RCLK  &mkp LCLK  &mkp MCLK    &mkp MCLK  &mkp LCLK
            >;
        };

        Scroll {
            label = "Scroll";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        Sniper {
            label = "Sniper";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
